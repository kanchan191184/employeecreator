# Employee Creator Documentation

# Introduction
The Employee Creator project is a web application designed to manage employee records. It allows users to create, list, update, and delete employees. The application consists of a Spring Boot RESTful API for the backend and a React TypeScript frontend. The project is built with a focus on production readiness, maintainability, and robustness.

# Features

# Frontend Features

1. Employee Management:
    - Add new employees with personal, contact, and job details.
    - Edit existing employee details, including job records.
    - View detailed information about an employee, including job history.
    - Delete employees from the system.

2. Job Record Management:
    - Add job records with job type, start date, and end date.
    - Update job records for existing employees.
    - Display job history in the employee details page.

3. Form Validations:
    - Required fields for all employee and job record inputs.
    - Validation for endDate to ensure it is in the future or present.
    - Real-time validation feedback for form inputs.

4. Responsive Design:
    - Fully responsive UI for desktop and mobile devices.
    - Built using SCSS for styling.

5. React Features:
    - React hooks for state management and side effects.
    - React Router for navigation between pages.
    - Axios for API calls.

6. Error Handling:
    - User-friendly error messages for failed API calls.
    - Toast notifications for success and error events.

# Backend Features

1. RESTful API Endpoints:
    - Create Employee: Add a new employee with job records.
    - Get All Employees: Retrieve a list of all employees.
    - Get Employee by ID: Retrieve detailed information about a specific employee.
    - Update Employee: Update employee details, including job records.
    - Delete Employee: Remove an employee from the system.

2. Database Integration
    - MySQL database for storing employee and job record data.
    - employees table for personal and contact details.
    - job_records table for job history.

3. Validation
    - Backend validation for required fields.
    - Validation for endDate to ensure it is in the future or present.

4. Error Handling
    - Custom exceptions for handling not found and validation errors.
    - Proper HTTP status codes for API responses.

5. CORS Configuration
    - Configured to handle cross-origin requests for frontend-backend communication.

# Technology Stack

# Frontend
    - Framework: React with TypeScript
    - Styling: SCSS
    - State Management: React hooks
    - Routing: React Router
    - HTTP Client: Axios
    - Notification Alert - Toast Notification

# Backend
    - Framework: Spring Boot
    - Database: MySQL
    - ORM: Spring Data JPA
    - Validation: Hibernate Validator

## Database Schema

# Employees Table

    |Column Name	Data Type	        Description
    |id	            INT (PK, Auto)	    Primary key for employees.
    |firstName	    VARCHAR	            Employee's first name.
    |middleName	    VARCHAR	            Employee's middle name.
    |lastName	    VARCHAR	            Employee's last name.
    |email	        VARCHAR	            Employee's email address.
    |phone	        VARCHAR	            Employee's phone number.
    |address	    VARCHAR	            Employee's address.
    |jobStatus	    ENUM	            Full-time or part-time status.

# Job Records Table

    Column Name	    Data Type	        Description
    id	            INT (PK, Auto)	    Primary key for job records.
    jobType	        ENUM	            Contract or permanent type.
    startDate	    DATE	            Job start date.
    endDate	        DATE	            Job end date.
    employee_id	    INT (FK)	        Foreign key to employees table.

## API Endpoints

# Employee Endpoints

1. Create Employees
    - URL: POST /employees
    - Request Body: 
        {
            "firstName": "John",
            "middleName": "A.",
            "lastName": "Doe",
            "email": "john.doe@example.com",
            "phoneNumber": "1234567890",
            "address": "123 Main St",
            "jobStatus": "FULL_TIME",
            "jobRecords": [
                {
                    "jobType": "CONTRACT",
                    "startDate": "2023-01-01",
                    "endDate": "2023-12-31"
                }
            ]
        }

    - Response: 201 Created
2.  Get All Employees
    - URL: GET /employees
    - Response: List of employees.

3. Get Employee by ID
    - URL: GET /employees/{id}
    - Response: Employee details with job records.

4. Update Employee
    - URL: PATCH /employees/{id}
    - Request Body: Similar to Create Employee.

5. Delete Employee
    -URL: DELETE /employees/{id}
    -Response: 204 No Content

## Setup Instructions

# Backend Setup

1. Install Java 17 and Maven.
2. Clone the repository.
3. Configure the database in application.properties:
    ```
    spring.datasource.url=jdbc:mysql://localhost:3306/employee_creator
    spring.datasource.username=root
    spring.datasource.password=yourpassword
    spring.jpa.hibernate.ddl-auto=update

    ```
4. Run the application:
    ```
     mvn spring-boot:run
    ```
    ## The API will be available at http://localhost:8080.

# Frontend Setup

1. Install Node.js and npm.
2. Navigate to the frontend directory.
3. Install dependencies: 
    ```
    npm install
    ```

4. Start the development server:
    ```
    npm run dev
    ```

    ## The app will be available at http://localhost:5173 (or the port shown in your terminal).



